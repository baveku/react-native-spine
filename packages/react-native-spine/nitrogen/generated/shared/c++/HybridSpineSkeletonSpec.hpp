///
/// HybridSpineSkeletonSpec.hpp
/// This file was generated by nitrogen. DO NOT MODIFY THIS FILE.
/// https://github.com/mrousavy/nitro
/// Copyright Â© 2025 Marc Rousavy @ Margelo
///

#pragma once

#if __has_include(<NitroModules/HybridObject.hpp>)
#include <NitroModules/HybridObject.hpp>
#else
#error NitroModules cannot be found! Are you sure you installed NitroModules properly?
#endif

// Forward declaration of `SpineTrackEntry` to properly resolve imports.
namespace margelo::nitro::spine { struct SpineTrackEntry; }
// Forward declaration of `SpineAnimationStateListener` to properly resolve imports.
namespace margelo::nitro::spine { struct SpineAnimationStateListener; }

#include <string>
#include <vector>
#include "SpineTrackEntry.hpp"
#include <optional>
#include "SpineAnimationStateListener.hpp"

namespace margelo::nitro::spine {

  using namespace margelo::nitro;

  /**
   * An abstract base class for `SpineSkeleton`
   * Inherit this class to create instances of `HybridSpineSkeletonSpec` in C++.
   * You must explicitly call `HybridObject`'s constructor yourself, because it is virtual.
   * @example
   * ```cpp
   * class HybridSpineSkeleton: public HybridSpineSkeletonSpec {
   * public:
   *   HybridSpineSkeleton(...): HybridObject(TAG) { ... }
   *   // ...
   * };
   * ```
   */
  class HybridSpineSkeletonSpec: public virtual HybridObject {
    public:
      // Constructor
      explicit HybridSpineSkeletonSpec(): HybridObject(TAG) { }

      // Destructor
      ~HybridSpineSkeletonSpec() override = default;

    public:
      // Properties
      virtual std::string getAtlasFilePath() = 0;
      virtual std::string getSkeletonFilePath() = 0;
      virtual double getWidth() = 0;
      virtual double getHeight() = 0;
      virtual std::string getDefaultSkin() = 0;
      virtual std::vector<std::string> getSkins() = 0;
      virtual std::vector<std::string> getAnimations() = 0;
      virtual std::vector<std::string> getBones() = 0;
      virtual std::vector<std::string> getSlots() = 0;

    public:
      // Methods
      virtual SpineTrackEntry setAnimation(double trackIndex, const std::string& animationName, bool loop) = 0;
      virtual SpineTrackEntry addAnimation(double trackIndex, const std::string& animationName, bool loop, double delay) = 0;
      virtual void setSkin(const std::string& skinName) = 0;
      virtual void setTimeScale(double timeScale) = 0;
      virtual void clearTrack(double trackIndex) = 0;
      virtual void clearTracks() = 0;
      virtual void update(double deltaTime) = 0;
      virtual void setAnimationStateListener(const std::optional<SpineAnimationStateListener>& listener) = 0;

    protected:
      // Hybrid Setup
      void loadHybridMethods() override;

    protected:
      // Tag for logging
      static constexpr auto TAG = "SpineSkeleton";
  };

} // namespace margelo::nitro::spine
