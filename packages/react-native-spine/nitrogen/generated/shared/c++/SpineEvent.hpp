///
/// SpineEvent.hpp
/// This file was generated by nitrogen. DO NOT MODIFY THIS FILE.
/// https://github.com/mrousavy/nitro
/// Copyright Â© 2025 Marc Rousavy @ Margelo
///

#pragma once

#if __has_include(<NitroModules/JSIConverter.hpp>)
#include <NitroModules/JSIConverter.hpp>
#else
#error NitroModules cannot be found! Are you sure you installed NitroModules properly?
#endif
#if __has_include(<NitroModules/NitroDefines.hpp>)
#include <NitroModules/NitroDefines.hpp>
#else
#error NitroModules cannot be found! Are you sure you installed NitroModules properly?
#endif



#include <string>

namespace margelo::nitro::spine {

  /**
   * A struct which can be represented as a JavaScript object (SpineEvent).
   */
  struct SpineEvent {
  public:
    std::string name     SWIFT_PRIVATE;
    double intValue     SWIFT_PRIVATE;
    double floatValue     SWIFT_PRIVATE;
    std::string stringValue     SWIFT_PRIVATE;

  public:
    SpineEvent() = default;
    explicit SpineEvent(std::string name, double intValue, double floatValue, std::string stringValue): name(name), intValue(intValue), floatValue(floatValue), stringValue(stringValue) {}
  };

} // namespace margelo::nitro::spine

namespace margelo::nitro {

  using namespace margelo::nitro::spine;

  // C++ SpineEvent <> JS SpineEvent (object)
  template <>
  struct JSIConverter<SpineEvent> final {
    static inline SpineEvent fromJSI(jsi::Runtime& runtime, const jsi::Value& arg) {
      jsi::Object obj = arg.asObject(runtime);
      return SpineEvent(
        JSIConverter<std::string>::fromJSI(runtime, obj.getProperty(runtime, "name")),
        JSIConverter<double>::fromJSI(runtime, obj.getProperty(runtime, "intValue")),
        JSIConverter<double>::fromJSI(runtime, obj.getProperty(runtime, "floatValue")),
        JSIConverter<std::string>::fromJSI(runtime, obj.getProperty(runtime, "stringValue"))
      );
    }
    static inline jsi::Value toJSI(jsi::Runtime& runtime, const SpineEvent& arg) {
      jsi::Object obj(runtime);
      obj.setProperty(runtime, "name", JSIConverter<std::string>::toJSI(runtime, arg.name));
      obj.setProperty(runtime, "intValue", JSIConverter<double>::toJSI(runtime, arg.intValue));
      obj.setProperty(runtime, "floatValue", JSIConverter<double>::toJSI(runtime, arg.floatValue));
      obj.setProperty(runtime, "stringValue", JSIConverter<std::string>::toJSI(runtime, arg.stringValue));
      return obj;
    }
    static inline bool canConvert(jsi::Runtime& runtime, const jsi::Value& value) {
      if (!value.isObject()) {
        return false;
      }
      jsi::Object obj = value.getObject(runtime);
      if (!JSIConverter<std::string>::canConvert(runtime, obj.getProperty(runtime, "name"))) return false;
      if (!JSIConverter<double>::canConvert(runtime, obj.getProperty(runtime, "intValue"))) return false;
      if (!JSIConverter<double>::canConvert(runtime, obj.getProperty(runtime, "floatValue"))) return false;
      if (!JSIConverter<std::string>::canConvert(runtime, obj.getProperty(runtime, "stringValue"))) return false;
      return true;
    }
  };

} // namespace margelo::nitro
