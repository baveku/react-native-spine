///
/// SpineTrackEntry.hpp
/// This file was generated by nitrogen. DO NOT MODIFY THIS FILE.
/// https://github.com/mrousavy/nitro
/// Copyright Â© 2025 Marc Rousavy @ Margelo
///

#pragma once

#if __has_include(<NitroModules/JSIConverter.hpp>)
#include <NitroModules/JSIConverter.hpp>
#else
#error NitroModules cannot be found! Are you sure you installed NitroModules properly?
#endif
#if __has_include(<NitroModules/NitroDefines.hpp>)
#include <NitroModules/NitroDefines.hpp>
#else
#error NitroModules cannot be found! Are you sure you installed NitroModules properly?
#endif



#include <string>

namespace margelo::nitro::spine {

  /**
   * A struct which can be represented as a JavaScript object (SpineTrackEntry).
   */
  struct SpineTrackEntry {
  public:
    double trackIndex     SWIFT_PRIVATE;
    std::string animation     SWIFT_PRIVATE;
    bool isLooping     SWIFT_PRIVATE;
    double mixDuration     SWIFT_PRIVATE;
    double timeScale     SWIFT_PRIVATE;

  public:
    SpineTrackEntry() = default;
    explicit SpineTrackEntry(double trackIndex, std::string animation, bool isLooping, double mixDuration, double timeScale): trackIndex(trackIndex), animation(animation), isLooping(isLooping), mixDuration(mixDuration), timeScale(timeScale) {}
  };

} // namespace margelo::nitro::spine

namespace margelo::nitro {

  using namespace margelo::nitro::spine;

  // C++ SpineTrackEntry <> JS SpineTrackEntry (object)
  template <>
  struct JSIConverter<SpineTrackEntry> final {
    static inline SpineTrackEntry fromJSI(jsi::Runtime& runtime, const jsi::Value& arg) {
      jsi::Object obj = arg.asObject(runtime);
      return SpineTrackEntry(
        JSIConverter<double>::fromJSI(runtime, obj.getProperty(runtime, "trackIndex")),
        JSIConverter<std::string>::fromJSI(runtime, obj.getProperty(runtime, "animation")),
        JSIConverter<bool>::fromJSI(runtime, obj.getProperty(runtime, "isLooping")),
        JSIConverter<double>::fromJSI(runtime, obj.getProperty(runtime, "mixDuration")),
        JSIConverter<double>::fromJSI(runtime, obj.getProperty(runtime, "timeScale"))
      );
    }
    static inline jsi::Value toJSI(jsi::Runtime& runtime, const SpineTrackEntry& arg) {
      jsi::Object obj(runtime);
      obj.setProperty(runtime, "trackIndex", JSIConverter<double>::toJSI(runtime, arg.trackIndex));
      obj.setProperty(runtime, "animation", JSIConverter<std::string>::toJSI(runtime, arg.animation));
      obj.setProperty(runtime, "isLooping", JSIConverter<bool>::toJSI(runtime, arg.isLooping));
      obj.setProperty(runtime, "mixDuration", JSIConverter<double>::toJSI(runtime, arg.mixDuration));
      obj.setProperty(runtime, "timeScale", JSIConverter<double>::toJSI(runtime, arg.timeScale));
      return obj;
    }
    static inline bool canConvert(jsi::Runtime& runtime, const jsi::Value& value) {
      if (!value.isObject()) {
        return false;
      }
      jsi::Object obj = value.getObject(runtime);
      if (!JSIConverter<double>::canConvert(runtime, obj.getProperty(runtime, "trackIndex"))) return false;
      if (!JSIConverter<std::string>::canConvert(runtime, obj.getProperty(runtime, "animation"))) return false;
      if (!JSIConverter<bool>::canConvert(runtime, obj.getProperty(runtime, "isLooping"))) return false;
      if (!JSIConverter<double>::canConvert(runtime, obj.getProperty(runtime, "mixDuration"))) return false;
      if (!JSIConverter<double>::canConvert(runtime, obj.getProperty(runtime, "timeScale"))) return false;
      return true;
    }
  };

} // namespace margelo::nitro
