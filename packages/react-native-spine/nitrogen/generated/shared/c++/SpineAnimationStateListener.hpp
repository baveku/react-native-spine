///
/// SpineAnimationStateListener.hpp
/// This file was generated by nitrogen. DO NOT MODIFY THIS FILE.
/// https://github.com/mrousavy/nitro
/// Copyright Â© 2025 Marc Rousavy @ Margelo
///

#pragma once

#if __has_include(<NitroModules/JSIConverter.hpp>)
#include <NitroModules/JSIConverter.hpp>
#else
#error NitroModules cannot be found! Are you sure you installed NitroModules properly?
#endif
#if __has_include(<NitroModules/NitroDefines.hpp>)
#include <NitroModules/NitroDefines.hpp>
#else
#error NitroModules cannot be found! Are you sure you installed NitroModules properly?
#endif

// Forward declaration of `SpineTrackEntry` to properly resolve imports.
namespace margelo::nitro::spine { struct SpineTrackEntry; }
// Forward declaration of `SpineEvent` to properly resolve imports.
namespace margelo::nitro::spine { struct SpineEvent; }

#include <optional>
#include <functional>
#include "SpineTrackEntry.hpp"
#include "SpineEvent.hpp"

namespace margelo::nitro::spine {

  /**
   * A struct which can be represented as a JavaScript object (SpineAnimationStateListener).
   */
  struct SpineAnimationStateListener {
  public:
    std::optional<std::function<void(const SpineTrackEntry& /* trackEntry */)>> onAnimationStart     SWIFT_PRIVATE;
    std::optional<std::function<void(const SpineTrackEntry& /* trackEntry */)>> onAnimationInterrupt     SWIFT_PRIVATE;
    std::optional<std::function<void(const SpineTrackEntry& /* trackEntry */)>> onAnimationEnd     SWIFT_PRIVATE;
    std::optional<std::function<void(const SpineTrackEntry& /* trackEntry */)>> onAnimationComplete     SWIFT_PRIVATE;
    std::optional<std::function<void(const SpineTrackEntry& /* trackEntry */)>> onAnimationDispose     SWIFT_PRIVATE;
    std::optional<std::function<void(const SpineTrackEntry& /* trackEntry */, const SpineEvent& /* event */)>> onAnimationEvent     SWIFT_PRIVATE;

  public:
    SpineAnimationStateListener() = default;
    explicit SpineAnimationStateListener(std::optional<std::function<void(const SpineTrackEntry& /* trackEntry */)>> onAnimationStart, std::optional<std::function<void(const SpineTrackEntry& /* trackEntry */)>> onAnimationInterrupt, std::optional<std::function<void(const SpineTrackEntry& /* trackEntry */)>> onAnimationEnd, std::optional<std::function<void(const SpineTrackEntry& /* trackEntry */)>> onAnimationComplete, std::optional<std::function<void(const SpineTrackEntry& /* trackEntry */)>> onAnimationDispose, std::optional<std::function<void(const SpineTrackEntry& /* trackEntry */, const SpineEvent& /* event */)>> onAnimationEvent): onAnimationStart(onAnimationStart), onAnimationInterrupt(onAnimationInterrupt), onAnimationEnd(onAnimationEnd), onAnimationComplete(onAnimationComplete), onAnimationDispose(onAnimationDispose), onAnimationEvent(onAnimationEvent) {}
  };

} // namespace margelo::nitro::spine

namespace margelo::nitro {

  using namespace margelo::nitro::spine;

  // C++ SpineAnimationStateListener <> JS SpineAnimationStateListener (object)
  template <>
  struct JSIConverter<SpineAnimationStateListener> final {
    static inline SpineAnimationStateListener fromJSI(jsi::Runtime& runtime, const jsi::Value& arg) {
      jsi::Object obj = arg.asObject(runtime);
      return SpineAnimationStateListener(
        JSIConverter<std::optional<std::function<void(const SpineTrackEntry& /* trackEntry */)>>>::fromJSI(runtime, obj.getProperty(runtime, "onAnimationStart")),
        JSIConverter<std::optional<std::function<void(const SpineTrackEntry& /* trackEntry */)>>>::fromJSI(runtime, obj.getProperty(runtime, "onAnimationInterrupt")),
        JSIConverter<std::optional<std::function<void(const SpineTrackEntry& /* trackEntry */)>>>::fromJSI(runtime, obj.getProperty(runtime, "onAnimationEnd")),
        JSIConverter<std::optional<std::function<void(const SpineTrackEntry& /* trackEntry */)>>>::fromJSI(runtime, obj.getProperty(runtime, "onAnimationComplete")),
        JSIConverter<std::optional<std::function<void(const SpineTrackEntry& /* trackEntry */)>>>::fromJSI(runtime, obj.getProperty(runtime, "onAnimationDispose")),
        JSIConverter<std::optional<std::function<void(const SpineTrackEntry& /* trackEntry */, const SpineEvent& /* event */)>>>::fromJSI(runtime, obj.getProperty(runtime, "onAnimationEvent"))
      );
    }
    static inline jsi::Value toJSI(jsi::Runtime& runtime, const SpineAnimationStateListener& arg) {
      jsi::Object obj(runtime);
      obj.setProperty(runtime, "onAnimationStart", JSIConverter<std::optional<std::function<void(const SpineTrackEntry& /* trackEntry */)>>>::toJSI(runtime, arg.onAnimationStart));
      obj.setProperty(runtime, "onAnimationInterrupt", JSIConverter<std::optional<std::function<void(const SpineTrackEntry& /* trackEntry */)>>>::toJSI(runtime, arg.onAnimationInterrupt));
      obj.setProperty(runtime, "onAnimationEnd", JSIConverter<std::optional<std::function<void(const SpineTrackEntry& /* trackEntry */)>>>::toJSI(runtime, arg.onAnimationEnd));
      obj.setProperty(runtime, "onAnimationComplete", JSIConverter<std::optional<std::function<void(const SpineTrackEntry& /* trackEntry */)>>>::toJSI(runtime, arg.onAnimationComplete));
      obj.setProperty(runtime, "onAnimationDispose", JSIConverter<std::optional<std::function<void(const SpineTrackEntry& /* trackEntry */)>>>::toJSI(runtime, arg.onAnimationDispose));
      obj.setProperty(runtime, "onAnimationEvent", JSIConverter<std::optional<std::function<void(const SpineTrackEntry& /* trackEntry */, const SpineEvent& /* event */)>>>::toJSI(runtime, arg.onAnimationEvent));
      return obj;
    }
    static inline bool canConvert(jsi::Runtime& runtime, const jsi::Value& value) {
      if (!value.isObject()) {
        return false;
      }
      jsi::Object obj = value.getObject(runtime);
      if (!JSIConverter<std::optional<std::function<void(const SpineTrackEntry& /* trackEntry */)>>>::canConvert(runtime, obj.getProperty(runtime, "onAnimationStart"))) return false;
      if (!JSIConverter<std::optional<std::function<void(const SpineTrackEntry& /* trackEntry */)>>>::canConvert(runtime, obj.getProperty(runtime, "onAnimationInterrupt"))) return false;
      if (!JSIConverter<std::optional<std::function<void(const SpineTrackEntry& /* trackEntry */)>>>::canConvert(runtime, obj.getProperty(runtime, "onAnimationEnd"))) return false;
      if (!JSIConverter<std::optional<std::function<void(const SpineTrackEntry& /* trackEntry */)>>>::canConvert(runtime, obj.getProperty(runtime, "onAnimationComplete"))) return false;
      if (!JSIConverter<std::optional<std::function<void(const SpineTrackEntry& /* trackEntry */)>>>::canConvert(runtime, obj.getProperty(runtime, "onAnimationDispose"))) return false;
      if (!JSIConverter<std::optional<std::function<void(const SpineTrackEntry& /* trackEntry */, const SpineEvent& /* event */)>>>::canConvert(runtime, obj.getProperty(runtime, "onAnimationEvent"))) return false;
      return true;
    }
  };

} // namespace margelo::nitro
